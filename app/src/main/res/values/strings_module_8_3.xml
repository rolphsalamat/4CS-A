<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Module 8_3 page 1 -->
    <!-- int[] module8_3_1 = {0, 0, 0, 0, 0, 0, 0, 0}; -->
    <string name="module8_3_1_title">THE CYK ALGORITHM FOR PARSING IN CNF</string>
    <string name="module8_3_1_content_1">In this lesson, you will dive into the Cocke-Younger-Kasami
(CYK) Algorithm, an efficient dynamic programming method used to parse strings within context-free
grammars. By the end of this lesson, you will gain a deeper understanding of how this algorithm works
with CFGs in CNF and how it can be applied to parsing strings systematically and efficiently.</string>
    <string name="module8_3_1_content_2"></string>

    <!-- Module 8_3 page 2 -->
    <!-- int[] module8_3_2 = {0, 0, 1, 0, 0, 0, 0, 0}; -->
    <string name="module8_3_2_title"></string>

    <string name="module8_3_2_content_1">The lesson presents an introduction to the CYK (Cocke-
Younger-Kasami) Algorithm, a dynamic programming algorithm for parsing strings in context-free

grammars (CFGs), once they have been converted into Chomsky Normal Form (CNF). It covers the
following key points:</string>
    <string name="module8_3_2_content_2">Chomsky Normal Form (CNF): A CFG is in CNF if its
production rules either produce two non-terminals or a single terminal symbol.</string>
    <string name="module8_3_2_content_3"></string>
    <string name="module8_3_2_content_4"></string>
    <string name="module8_3_2_content_5"></string>

    <!-- Module 8_3 page 3 -->
    <!-- int[] module8_3_3 = {0, 1, 2, 2, 2, 2, 0, 0}; -->
    <string name="module8_3_3_title"></string>
    <string name="module8_3_3_content_1">Steps in the CYK Algorithm:</string>
    <string name="module8_3_3_content_2">Convert CFG to CNF: Ensure the grammar conforms to CNF
rules, such as eliminating epsilon-productions and useless symbols.</string>
    <string name="module8_3_3_content_3">Initialize the Parsing Table: A triangular table is constructed
to represent substrings of the input string, with rows representing substring lengths and columns
representing their starting positions.</string>
    <string name="module8_3_3_content_4">Fill the Table: The table is filled by applying the production
rules of CNF, combining substrings and determining non-terminals that generate them.</string>
    <string name="module8_3_3_content_5">Check the Start Symbol: Finally, the algorithm checks if the
start symbol is present in the top-right cell of the table. If so, the string is accepted by the
grammar.</string>
    <string name="module8_3_3_content_6"></string>

    <!-- Module 8_3 page 4 -->
    <!-- int[] module8_3_4 = {0, 0, 0, 0, 0, 0, 0, 0}; -->
    <string name="module8_3_4_title"></string>
    <string name="module8_3_4_content_1">Basic Examples</string>
    <string name="module8_3_4_content_2">Example 1: Converting a CFG to CNF</string>
    <string name="module8_3_4_content_3">Suppose you have a CFG with the rule S→AB ∣ BC. To use
the CYK algorithm, this grammar must be in CNF, meaning the rules should either be in the form A→BC
or A → a , where A, B, C are non-terminal symbols and a is a terminal symbol.</string>
    <string name="module8_3_4_content_4"></string>
    <string name="module8_3_4_content_5"></string>

    <!-- Module 8_3 page 5 -->

    <!-- int[] module8_3_5 = {0, 0, 0, 0, 0, 0, 0, 0}; -->
    <string name="module8_3_5_title"></string>
    <string name="module8_3_5_content_1">Example 2: Parsing with the CYK Algorithm</string>
    <string name="module8_3_5_content_2">Given a grammar in CNF:</string>
    <string name="module8_3_5_content_3">S → AB | BC</string>
    <string name="module8_3_5_content_4">A → BA | a</string>
    <string name="module8_3_5_content_5">B → CC | b</string>
    <string name="module8_3_5_content_6">C → AB | a</string>
    <string name="module8_3_5_content_7"></string>

    <!-- Module 8_3 page 6 -->
    <!-- int[] module8_3_6 = {0, 0, 1, 1, 1, 1, 0, 0}; -->
    <string name="module8_3_6_title"></string>
    <string name="module8_3_6_content_1">To parse the string "ba":</string>
    <string name="module8_3_6_content_2">Initialize a table for "ba".</string>
    <string name="module8_3_6_content_3">For the substring "b", the rule B → b applies, so B is added
to the table for "b".</string>
    <string name="module8_3_6_content_4">For the substring "a", both A → a and C → a apply, so A and
C are added to the table for "a".</string>
    <string name="module8_3_6_content_5">Combining the substrings "b" and "a", the rule S → BC
applies, so S is added to the table for "ba".</string>
    <string name="module8_3_6_content_6">Since the start symbol S is found in the final cell, the string
"ba" is accepted by the grammar.</string>
    <string name="module8_3_6_content_7"></string>

</resources>