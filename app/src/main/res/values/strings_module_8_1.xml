<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Module 8 -->
    <!-- Module 8_1 page 1 -->
    <string name="module8_1_1_title">Top-down Parsing (Recursive Descent, LL(1) Parsing)</string>
    <string name="module8_1_1_content_1">This lesson is designed to give you a foundational understanding of parsing, specifically focusing on Top-Down Parsing Techniques. As we explore these methods, you\'ll gain insights into how parsers work to analyze and interpret strings of symbols based on grammar rules. By the end of this lesson, you\'ll have implemented your first recursive descent parser and explored key concepts such as LL(1) Parsing. Let\'s dive into the exciting world of parsing algorithms and uncover how they are essential in understanding programming and natural languages.</string>
    <string name="module8_1_1_content_2"></string>


    <!-- Module 8_1 page 2 -->
    <string name="module8_1_2_content_1">This lesson is an introductory lesson on parsing within the context of Context-Free Grammars (CFGs), with a primary focus on Top-Down Parsing Techniques. The document explains parsing as the process of analyzing a sequence of symbols to determine their grammatical structure. It introduces two main types of parsing: Top-down and Bottom-up, and delves into Recursive Descent Parsing and LL(1) Parsing methods.</string>
    <string name="module8_1_2_content_2">The lesson provides a step-by-step guide for implementing Recursive Descent Parsing, which is a type of top-down parsing where grammar rules are recursively applied. It also covers the removal of left recursion from grammar, a key requirement for using recursive descent parsers. Furthermore, the document explains LL(1) Parsing, a predictive, non-backtracking method that uses a lookahead symbol to make parsing decisions.</string>
    <string name="module8_1_2_content_3"></string>
    <string name="module8_1_2_content_4"></string>
    <string name="module8_1_2_content_5"></string>

    <!-- Module 8_1 page 3 -->
    <string name="module8_1_3_content_1">Basic Examples:</string>
    <string name="module8_1_3_content_2">Recursive Descent Parsing Example: Given the grammar:</string>
    <string name="module8_1_3_content_3">E → T E\'</string>
    <string name="module8_1_3_content_4">E\' → + T E\' | ε</string>
    <string name="module8_1_3_content_5">T → F T\'</string>
    <string name="module8_1_3_content_6">T\' → * F T\' | ε</string>
    <string name="module8_1_3_content_7">F → ( E ) | id</string>
    <string name="module8_1_3_content_8">The recursive descent parser will match tokens based on this grammar, working from the start symbol down to terminal symbols.</string>
    <string name="module8_1_3_content_9"></string>
    <string name="module8_1_3_content_10"></string>

    <!-- Module 8_1 page 4 -->
    <string name="module8_1_4_content_1">LL(1) Parsing Example: For the grammar:</string>
    <string name="module8_1_4_content_2">S → aB | bA</string>
    <string name="module8_1_4_content_3">A → a | ε</string>
    <string name="module8_1_4_content_4">B → b | ε</string>
    <string name="module8_1_4_content_5">An LL(1) parsing table is used to determine the correct production rule by looking at the current input symbol and one lookahead symbol.</string>
    <string name="module8_1_4_content_6"></string>


</resources>
