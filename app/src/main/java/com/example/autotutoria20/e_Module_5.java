package com.example.autotutoria20;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class e_Module_5 {
    // Pre-test questions, choices, and answers for Lesson 1
    public static final String[] pre_test_lesson_1_questions = {
            "What is a parse tree?",
            "What does a derivation represent?",
            "What is a leftmost derivation?"
    };

    public static final String[][] pre_test_lesson_1_choices = {
            {"A tree that represents syntactic structure", "A tree that represents semantic structure", "A tree that represents lexical structure", "A tree that represents phonetic structure"},
            {"The process of generating a string", "The process of parsing a string", "The process of executing a string", "The process of evaluating a string"},
            {"Derivation where the leftmost non-terminal is replaced first", "Derivation where the rightmost non-terminal is replaced first", "Derivation where the middle non-terminal is replaced first", "Derivation where any non-terminal is replaced first"}
    };

    public static final int[] pre_test_lesson_1_answers = {0, 0, 0};

    // Post-test questions, choices, and answers for Lesson 1
    public static final String[] post_test_lesson_1_questions = {
            "What is represented by a parse tree?",
            "What does a derivation in CFG indicate?",
            "What is the characteristic of a leftmost derivation?"
    };

    public static final String[][] post_test_lesson_1_choices = {
            {"Syntactic structure", "Semantic structure", "Lexical structure", "Phonetic structure"},
            {"Generation of a string", "Parsing of a string", "Execution of a string", "Evaluation of a string"},
            {"Leftmost non-terminal is replaced first", "Rightmost non-terminal is replaced first", "Middle non-terminal is replaced first", "Any non-terminal is replaced first"}
    };

    public static final int[] post_test_lesson_1_answers = {0, 0, 0};

    // Pre-test questions, choices, and answers for Lesson 2
    public static final String[] pre_test_lesson_2_questions = {
            "How does a parse tree relate to a derivation?",
            "What does each node in a parse tree represent?",
            "What is the relationship between derivation steps and parse tree levels?"
    };

    public static final String[][] pre_test_lesson_2_choices = {
            {"A parse tree visually represents a derivation", "A parse tree is unrelated to a derivation", "A parse tree is a sequence of derivations", "A parse tree is a sequence of symbols"},
            {"A production rule", "A non-terminal", "A terminal", "A string"},
            {"Each derivation step corresponds to a level in the parse tree", "Each derivation step corresponds to a node in the parse tree", "Each derivation step corresponds to a branch in the parse tree", "Each derivation step corresponds to a leaf in the parse tree"}
    };

    public static final int[] pre_test_lesson_2_answers = {0, 0, 0};

    // Post-test questions, choices, and answers for Lesson 2
    public static final String[] post_test_lesson_2_questions = {
            "What does a parse tree visually represent?",
            "In a parse tree, what does each internal node represent?",
            "How do derivation steps relate to parse tree construction?"
    };

    public static final String[][] post_test_lesson_2_choices = {
            {"A derivation", "A regular expression", "A terminal", "A language"},
            {"A non-terminal", "A terminal", "A production rule", "A string"},
            {"Each derivation step corresponds to a level in the parse tree", "Each derivation step corresponds to a node in the parse tree", "Each derivation step corresponds to a branch in the parse tree", "Each derivation step corresponds to a leaf in the parse tree"}
    };

    public static final int[] post_test_lesson_2_answers = {0, 0, 0};

    // Pre-test questions, choices, and answers for Lesson 3
    public static final String[] pre_test_lesson_3_questions = {
            "What is the difference between leftmost and rightmost derivations?",
            "In which derivation is the leftmost non-terminal replaced first?",
            "Why are different types of derivations important?"
    };

    public static final String[][] pre_test_lesson_3_choices = {
            {"Leftmost derivation replaces the leftmost non-terminal first, rightmost derivation replaces the rightmost non-terminal first", "Leftmost derivation replaces the rightmost non-terminal first, rightmost derivation replaces the leftmost non-terminal first", "Leftmost derivation replaces any non-terminal first, rightmost derivation replaces the middle non-terminal first", "There is no difference"},
            {"Leftmost derivation", "Rightmost derivation", "Random derivation", "Mixed derivation"},
            {"They help in understanding how strings are generated by grammars", "They determine the length of the generated string", "They affect the semantics of the language", "They have no importance"}
    };

    public static final int[] pre_test_lesson_3_answers = {0, 0, 0};

    // Post-test questions, choices, and answers for Lesson 3
    public static final String[] post_test_lesson_3_questions = {
            "Which derivation method replaces the leftmost non-terminal first?",
            "What is the significance of rightmost derivations?",
            "How do leftmost and rightmost derivations affect the parse tree structure?"
    };

    public static final String[][] post_test_lesson_3_choices = {
            {"Leftmost derivation", "Rightmost derivation", "Random derivation", "Mixed derivation"},
            {"They help in constructing the parse tree", "They affect the grammar rules", "They determine the type of language", "They alter the string length"},
            {"Leftmost derivation leads to a left-skewed parse tree, rightmost derivation leads to a right-skewed parse tree", "Leftmost derivation leads to a right-skewed parse tree, rightmost derivation leads to a left-skewed parse tree", "Both lead to balanced trees", "Both lead to identical trees"}
    };

    public static final int[] post_test_lesson_3_answers = {0, 0, 0};

    // Method to get pre-test questions for a specific lesson
    public static e_Question[] getPreTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPreTestLesson1Questions();
            case "M2":
                return getPreTestLesson2Questions();
            case "M3":
                return getPreTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get post-test questions for a specific lesson
    public static e_Question[] getPostTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPostTestLesson1Questions();
            case "M2":
                return getPostTestLesson2Questions();
            case "M3":
                return getPostTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get pre-test questions for Lesson 1
    public static e_Question[] getPreTestLesson1Questions() {
        return getQuestions(pre_test_lesson_1_questions, pre_test_lesson_1_choices, pre_test_lesson_1_answers);
    }

    // Method to get post-test questions for Lesson 1
    public static e_Question[] getPostTestLesson1Questions() {
        return getQuestions(post_test_lesson_1_questions, post_test_lesson_1_choices, post_test_lesson_1_answers);
    }

    // Method to get pre-test questions for Lesson 2
    public static e_Question[] getPreTestLesson2Questions() {
        return getQuestions(pre_test_lesson_2_questions, pre_test_lesson_2_choices, pre_test_lesson_2_answers);
    }

    // Method to get post-test questions for Lesson 2
    public static e_Question[] getPostTestLesson2Questions() {
        return getQuestions(post_test_lesson_2_questions, post_test_lesson_2_choices, post_test_lesson_2_answers);
    }

    // Method to get pre-test questions for Lesson 3
    public static e_Question[] getPreTestLesson3Questions() {
        return getQuestions(pre_test_lesson_3_questions, pre_test_lesson_3_choices, pre_test_lesson_3_answers);
    }

    // Method to get post-test questions for Lesson 3
    public static e_Question[] getPostTestLesson3Questions() {
        return getQuestions(post_test_lesson_3_questions, post_test_lesson_3_choices, post_test_lesson_3_answers);
    }

    // Method to convert string arrays to e_Question objects
    private static e_Question[] getQuestions(String[] questions, String[][] choices, int[] answers) {
        List<e_Question> questionList = new ArrayList<>();
        for (int i = 0; i < questions.length; i++) {
            questionList.add(new e_Question(questions[i], choices[i], answers[i], e_Question.Difficulty.EASY)); // Adjust difficulty if needed
        }

        // Shuffle the list to randomize the order of the questions
        Collections.shuffle(questionList);

        // Convert the list back to an array
        return questionList.toArray(new e_Question[0]);
    }
}
