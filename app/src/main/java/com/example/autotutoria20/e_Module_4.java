package com.example.autotutoria20;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class e_Module_4 {
    // Pre-test questions, choices, and answers for Lesson 1
    public static final String[] pre_test_lesson_1_questions = {
            "What is a context-free grammar (CFG)?",
            "Which of the following is a terminal symbol?",
            "What does a production rule specify?"
    };

    public static final String[][] pre_test_lesson_1_choices = {
            {"A set of production rules", "A set of terminals", "A set of non-terminals", "A type of automaton"},
            {"A", "S", "a", "B"},
            {"How to generate strings", "How to parse strings", "How to evaluate expressions", "How to execute code"}
    };

    public static final int[] pre_test_lesson_1_answers = {0, 2, 0};

    // Post-test questions, choices, and answers for Lesson 1
    public static final String[] post_test_lesson_1_questions = {
            "What defines a context-free grammar?",
            "Which symbol is a non-terminal?",
            "What is the role of production rules in CFG?"
    };

    public static final String[][] post_test_lesson_1_choices = {
            {"A set of production rules", "A set of strings", "A set of rules", "A type of language"},
            {"a", "b", "S", "x"},
            {"To generate strings", "To parse strings", "To evaluate strings", "To execute code"}
    };

    public static final int[] post_test_lesson_1_answers = {0, 2, 0};

    // Pre-test questions, choices, and answers for Lesson 2
    public static final String[] pre_test_lesson_2_questions = {
            "What are the components of a context-free grammar?",
            "Which of the following is a non-terminal symbol?",
            "What is the start symbol in a context-free grammar?"
    };

    public static final String[][] pre_test_lesson_2_choices = {
            {"Terminals, Non-terminals, Start symbol, Production rules", "Alphabets, Symbols, Rules, States", "Strings, Trees, Nodes, Edges", "Variables, Constants, Functions, Statements"},
            {"a", "b", "S", "x"},
            {"Start", "S", "A", "B"}
    };

    public static final int[] pre_test_lesson_2_answers = {0, 2, 1};

    // Post-test questions, choices, and answers for Lesson 2
    public static final String[] post_test_lesson_2_questions = {
            "Which components are essential for a context-free grammar?",
            "Identify the non-terminal in the following production: S -> aSb",
            "What is the role of the start symbol in a context-free grammar?"
    };

    public static final String[][] post_test_lesson_2_choices = {
            {"Terminals, Non-terminals, Start symbol, Production rules", "Alphabets, Symbols, Rules, States", "Strings, Trees, Nodes, Edges", "Variables, Constants, Functions, Statements"},
            {"a", "b", "S", "x"},
            {"It defines the starting point for generating strings", "It terminates the generation process", "It acts as a terminal symbol", "It is used for parsing only"}
    };

    public static final int[] post_test_lesson_2_answers = {0, 2, 0};

    // Pre-test questions, choices, and answers for Lesson 3
    public static final String[] pre_test_lesson_3_questions = {
            "Which of the following is an example of a context-free grammar?",
            "What language is generated by the CFG with the production S -> aSb | ε?",
            "How do CFGs represent simple programming languages?"
    };

    public static final String[][] pre_test_lesson_3_choices = {
            {"S -> aSb | ε", "S -> ab | ba", "S -> a | b", "S -> aA | Ab"},
            {"Balanced parentheses", "Unbalanced strings", "Simple sequences", "Arithmetic expressions"},
            {"By generating parse trees", "By defining semantic rules", "By translating code", "By compiling programs"}
    };

    public static final int[] pre_test_lesson_3_answers = {0, 0, 0};

    // Post-test questions, choices, and answers for Lesson 3
    public static final String[] post_test_lesson_3_questions = {
            "What does the CFG S -> aSb | ε generate?",
            "Which of the following is a context-free language?",
            "How are CFGs applied in programming language design?"
    };

    public static final String[][] post_test_lesson_3_choices = {
            {"Balanced strings", "Unbalanced strings", "Regular languages", "Finite languages"},
            {"Balanced parentheses", "Regular sequences", "Simple regular expressions", "Fixed patterns"},
            {"They define the syntax of the language", "They enforce coding standards", "They compile the code", "They parse the code"}
    };

    public static final int[] post_test_lesson_3_answers = {0, 0, 0};

    // Method to get pre-test questions for a specific lesson
    public static e_Question[] getPreTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPreTestLesson1Questions();
            case "M2":
                return getPreTestLesson2Questions();
            case "M3":
                return getPreTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get post-test questions for a specific lesson
    public static e_Question[] getPostTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPostTestLesson1Questions();
            case "M2":
                return getPostTestLesson2Questions();
            case "M3":
                return getPostTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get pre-test questions for Lesson 1
    public static e_Question[] getPreTestLesson1Questions() {
        return getQuestions(pre_test_lesson_1_questions, pre_test_lesson_1_choices, pre_test_lesson_1_answers);
    }

    // Method to get post-test questions for Lesson 1
    public static e_Question[] getPostTestLesson1Questions() {
        return getQuestions(post_test_lesson_1_questions, post_test_lesson_1_choices, post_test_lesson_1_answers);
    }

    // Method to get pre-test questions for Lesson 2
    public static e_Question[] getPreTestLesson2Questions() {
        return getQuestions(pre_test_lesson_2_questions, pre_test_lesson_2_choices, pre_test_lesson_2_answers);
    }

    // Method to get post-test questions for Lesson 2
    public static e_Question[] getPostTestLesson2Questions() {
        return getQuestions(post_test_lesson_2_questions, post_test_lesson_2_choices, post_test_lesson_2_answers);
    }

    // Method to get pre-test questions for Lesson 3
    public static e_Question[] getPreTestLesson3Questions() {
        return getQuestions(pre_test_lesson_3_questions, pre_test_lesson_3_choices, pre_test_lesson_3_answers);
    }

    // Method to get post-test questions for Lesson 3
    public static e_Question[] getPostTestLesson3Questions() {
        return getQuestions(post_test_lesson_3_questions, post_test_lesson_3_choices, post_test_lesson_3_answers);
    }

    // Method to convert string arrays to e_Question objects
    private static e_Question[] getQuestions(String[] questions, String[][] choices, int[] answers) {
        List<e_Question> questionList = new ArrayList<>();
        for (int i = 0; i < questions.length; i++) {
            questionList.add(new e_Question(questions[i], choices[i], answers[i], e_Question.Difficulty.EASY)); // Adjust difficulty if needed
        }

        // Shuffle the list to randomize the order of the questions
        Collections.shuffle(questionList);

        // Convert the list back to an array
        return questionList.toArray(new e_Question[0]);
    }
}
