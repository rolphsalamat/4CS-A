package com.example.autotutoria20;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class e_Module_3_2 {

    /*
    +----------------------+
    |       PRE-TEST       |
    |        LESSON 2      |
    +----------------------+
    */

    public static e_Question[] get_PreTest_Lesson2_Questions() {
        return e_Module_3.getPreTestQuestions(
                pre_test_lesson_2_questions,
                pre_test_lesson_2_choices,
                pre_test_lesson_2_answers
        );
    }

    public static final String[] pre_test_lesson_2_questions = {
            /*1*/    "What does the Pumping Lemma help demonstrate about regular languages?",
            /*2*/    "In the Pumping Lemma, what does the term 'pumping' refer to in context to strings?",
            /*3*/    "Which of the following is NOT handled by finite automata?",
            /*4*/    "What is the primary role of the Pumping Lemma for regular languages?",
            /*5*/    "Which of the following statements is true regarding finite automata?",
            /*6*/    "What happens when a string fails the Pumping Lemma test?",
            /*7*/    "Which part of a string is subject to repetition in the Pumping Lemma?",
            /*8*/    "What is the consequence if a language satisfies the conditions of the Pumping Lemma?",
            /*9*/    "Which of the following represents a limitation of regular languages?",
            /*10*/   "What key property of regular languages is used in proving non-regularity?",
            /*11*/   "If a language violates the conditions of the Pumping Lemma, what does this indicate?",
            /*12*/   "What aspect of a string must be repeatable for the Pumping Lemma to hold?",
            /*13*/   "What type of languages can be proven as non-regular using the Pumping Lemma?",
            /*14*/   "Which operation is closed for regular languages?",
            /*15*/   "What is the main conclusion when a language passes the Pumping Lemma?"
    };

    public static final String[][] pre_test_lesson_2_choices = {
            /*1*/    {"Their ability to process infinite memory", "Their limitations in recognizing certain patterns", "Their capacity to solve recursive problems", "Their usage in dynamic memory systems"},
            /*2*/    {"Decreasing the length of a string", "Adding extra symbols outside the string", "Repeating a section of the string any number of times", "Removing specific characters from the string"},
            /*3*/    {"Simple loops", "Nested structures like balanced parentheses", "Linear patterns of symbols", "Strings of finite length"},
            /*4*/    {"To simplify complex languages", "To show that regular languages can generate infinite strings", "To identify if a language can be generated by a finite automaton", "To recognize patterns in context-free languages"},
            /*5*/    {"Finite automata can count arbitrarily large numbers", "Finite automata have limited memory and cannot recognize certain complex patterns", "Finite automata can process infinite loops", "Finite automata are only used for pattern matching in text"},
            /*6*/    {"The string is regular", "The language is not regular", "The automaton can process the string infinitely", "The string is context-free"},
            /*7*/    {"The first character", "The entire string", "The middle section of the string", "The last character"},
            /*8*/    {"The language is finite", "The language is regular", "The language is context-free", "The language is infinite"},
            /*9*/    {"Regular languages can recognize nested patterns", "Regular languages can handle dynamic memory allocation", "Regular languages cannot handle arbitrarily nested structures", "Regular languages have infinite memory"},
            /*10*/   {"Their ability to recognize context-free languages", "Their ability to handle recursive problems", "The Pumping Lemma, which demonstrates limitations in regular languages", "Their ability to store unlimited memory"},
            /*11*/   {"The language is regular", "The language is context-free", "The language is not regular", "The language is finite"},
            /*12*/   {"The first section", "The last character", "The middle part of the string", "The entire string"},
            /*13*/   {"Only context-free languages", "Any language that does not meet the conditions of the lemma", "Finite languages", "Recursive languages"},
            /*14*/   {"Exponentiation", "Differentiation", "Union", "Subtraction"},
            /*15*/   {"The language is not regular", "The language must use a finite automaton", "The language is a regular language", "The language cannot be recognized by any automaton"}
    };

    public static final int[] pre_test_lesson_2_answers = {
            /*1*/    1,  // "Their limitations in recognizing certain patterns"
            /*2*/    2,  // "Repeating a section of the string any number of times"
            /*3*/    1,  // "Nested structures like balanced parentheses"
            /*4*/    2,  // "To identify if a language can be generated by a finite automaton"
            /*5*/    1,  // "Finite automata have limited memory and cannot recognize certain complex patterns"
            /*6*/    1,  // "The language is not regular"
            /*7*/    2,  // "The middle section of the string"
            /*8*/    1,  // "The language is regular"
            /*9*/    2,  // "Regular languages cannot handle arbitrarily nested structures"
            /*10*/   2,  // "The Pumping Lemma, which demonstrates limitations in regular languages"
            /*11*/   2,  // "The language is not regular"
            /*12*/   2,  // "The middle part of the string"
            /*13*/   1,  // "Any language that does not meet the conditions of the lemma"
            /*14*/   2,  // "Union"
            /*15*/   2   // "The language is a regular language"
    };

    /*
    +----------------------+
    |       POST-TEST      |
    |        EASY          |
    +----------------------+
    */

    public static e_Question[] get_PostTest_Lesson2_Easy_Questions() {
        return e_Module_3.get_PostTest_EasyMedium_Questions(
                post_test_lesson_2_questions_easy,
                post_test_lesson_2_choices_easy,
                post_test_lesson_2_answers_easy,
                e_Question.Difficulty.EASY
        );
    }

    public static final String[] post_test_lesson_2_questions_easy = {
            /*1*/    "Finite automata can recognize the language {anbn | n is a natural number}.",
            /*2*/    "Non-regular languages cannot be described by regular expressions.",
            /*3*/    "Context-free grammars are less expressive than regular grammars.",
            /*4*/    "The language of palindromes is regular.",
            /*5*/    "A finite automaton has an infinite number of states.",
            /*6*/    "The Myhill-Nerode theorem helps in testing the regularity of languages.",
            /*7*/    "Regular languages can recognize nested structures.",
            /*8*/    "Balanced parentheses require a finite automaton for recognition.",
            /*9*/    "The Pumping Lemma can be used to prove non-regularity of languages.",
            /*10*/   "The language L = { w ∈ {(,)} ∗ ∣ w is a sequence of balanced parentheses } is non-regular.",
            /*11*/   "Finite automata can handle equal numbers of different symbols in all cases.",
            /*12*/   "The Pumping Lemma is primarily used to prove the regularity of languages.",
            /*13*/   "Pushdown automata can recognize context-free languages.",
            /*14*/   "Regular languages can handle matching parentheses.",
            /*15*/   "Turing machines are more powerful than pushdown automata."
    };

    public static final String[][] post_test_lesson_2_choices_easy = {
            /*1*/    {"True", "False"},
            /*2*/    {"True", "False"},
            /*3*/    {"True", "False"},
            /*4*/    {"True", "False"},
            /*5*/    {"True", "False"},
            /*6*/    {"True", "False"},
            /*7*/    {"True", "False"},
            /*8*/    {"True", "False"},
            /*9*/    {"True", "False"},
            /*10*/   {"True", "False"},
            /*11*/   {"True", "False"},
            /*12*/   {"True", "False"},
            /*13*/   {"True", "False"},
            /*14*/   {"True", "False"},
            /*15*/   {"True", "False"}
    };

    public static final int[] post_test_lesson_2_answers_easy = {
            /*1*/    1,  // False
            /*2*/    0,  // True
            /*3*/    1,  // False
            /*4*/    1,  // False
            /*5*/    1,  // False
            /*6*/    0,  // True
            /*7*/    1,  // False
            /*8*/    1,  // False
            /*9*/    0,  // True
            /*10*/   0,  // True
            /*11*/   1,  // False
            /*12*/   1,  // False
            /*13*/   0,  // True
            /*14*/   1,  // False
            /*15*/   0   // True
    };

    /*
    +----------------------+
    |       POST-TEST      |
    |        MEDIUM        |
    +----------------------+
    */

    public static e_Question[] get_PostTest_Lesson2_Medium_Questions() {
        return e_Module_3.get_PostTest_EasyMedium_Questions(
                post_test_lesson_2_questions_medium,
                post_test_lesson_2_choices_medium,
                post_test_lesson_2_answers_medium,
                e_Question.Difficulty.MEDIUM
        );
    }

    public static final String[] post_test_lesson_2_questions_medium = {
            /*1*/    "Which of the following languages is an example of a non-regular language?",
            /*2*/    "What is the main limitation of finite automata?",
            /*3*/    "Which method is used to prove the non-regularity of a language?",
            /*4*/    "Which of the following computational models can recognize non-regular languages?",
            /*5*/    "Which language requires counting and matching opening and closing parentheses?",
            /*6*/    "Which theorem is based on the indistinguishability of strings with respect to a language?",
            /*7*/    "Which language requires comparing the string to its reverse?",
            /*8*/    "What type of automaton is required to recognize context-free languages?",
            /*9*/    "Which language consists of strings like 'ab', 'aabb', 'aaabbb'?",
            /*10*/   "What is the purpose of the Pumping Lemma?",
            /*11*/   "Which language includes strings like '()', '(())', '(()())'?",
            /*12*/   "Which computational model is the most powerful in terms of language recognition?",
            /*13*/   "Which concept requires comparing different strings x and y in terms of a language L?",
            /*14*/   "Which language includes strings like 'a', 'aba', 'abba'?",
            /*15*/   "Which computational model can handle nested structures and matched symbols?"
    };

    public static final String[][] post_test_lesson_2_choices_medium = {
            /*1*/    {"{an | n is a natural number}", "{an bn | n is a natural number}", "{a*}", "{ab*}"},
            /*2*/    {"Cannot recognize infinite languages", "Has infinite states", "Cannot handle nested structures", "Cannot perform mathematical calculations"},
            /*3*/    {"Finite Automaton", "Context-Free Grammar", "Myhill-Nerode Theorem", "Regular Expression"},
            /*4*/    {"Finite Automata", "Pushdown Automata", "Regular Grammars", "Regular Expressions"},
            /*5*/    {"Palindrome", "Equal numbers of different symbols", "Balanced parentheses", "Regular expressions"},
            /*6*/    {"Pumping Lemma", "Myhill-Nerode Theorem", "Context-Free Grammar", "Turing Machine"},
            /*7*/    {"Palindromes", "Balanced parentheses", "Regular languages", "Context-free languages"},
            /*8*/    {"Finite Automaton", "Pushdown Automaton", "Regular Automaton", "Turing Machine"},
            /*9*/    {"Balanced parentheses", "Equal numbers of different symbols", "Palindromes", "Context-free languages"},
            /*10*/   {"To prove that certain languages are regular", "To describe context-free languages", "To prove that certain languages are non-regular", "To describe pushdown automata"},
            /*11*/   {"Regular languages", "Balanced parentheses", "Palindromes", "Equal numbers of different symbols"},
            /*12*/   {"Finite Automaton", "Pushdown Automaton", "Turing Machine", "Regular Grammar"},
            /*13*/   {"Pushdown Automaton", "Indistinguishability of Strings", "Pumping Lemma", "Regular Grammar"},
            /*14*/   {"Palindromes", "Balanced Parentheses", "Regular Expressions", "Equal Numbers of Symbols"},
            /*15*/   {"Finite Automaton", "Context-Free Grammar", "Pushdown Automaton", "Regular Grammar"}
    };

    public static final int[] post_test_lesson_2_answers_medium = {
            /*1*/    1,  // {an bn | n is a natural number}
            /*2*/    2,  // Cannot handle nested structures
            /*3*/    2,  // Myhill-Nerode Theorem
            /*4*/    1,  // Pushdown Automata
            /*5*/    2,  // Balanced parentheses
            /*6*/    1,  // Myhill-Nerode Theorem
            /*7*/    0,  // Palindromes
            /*8*/    1,  // Pushdown Automaton
            /*9*/    1,  // Equal numbers of different symbols
            /*10*/   2,  // To prove that certain languages are non-regular
            /*11*/   1,  // Balanced parentheses
            /*12*/   2,  // Turing Machine
            /*13*/   1,  // Indistinguishability of Strings
            /*14*/   0,  // Palindromes
            /*15*/   2   // Pushdown Automaton
    };

    /*
    +----------------------+
    |       POST-TEST      |
    |         HARD         |
    +----------------------+
    */

    public static e_Question[] get_PostTest_Lesson2_Hard_Questions() {
        return e_Module_3.get_PostTest_Hard_Questions(
                post_test_lesson_2_questions_hard,
                post_test_lesson_2_answers_hard,
                e_Question.Difficulty.HARD
        );
    }

    public static final String[] post_test_lesson_2_questions_hard = {
            /*1*/    "What type of automaton is capable of recognizing context-free languages using a stack?",
            /*2*/    "What type of language contains strings that read the same forward and backward, such as 'aba' and 'abba'?",
            /*3*/    "Which theorem is used to test whether a language is regular by comparing indistinguishable strings?",
            /*4*/    "Which lemma is commonly used to demonstrate that a given language is not regular?",
            /*5*/    "What is the term for languages that require more complex grammars than regular expressions to be described?",
            /*6*/    "Which computational model is the most powerful in terms of recognizing all types of languages, including context-free and context-sensitive languages?",
            /*7*/    "Which language includes sequences that require matching opening and closing parentheses, like '(())'?",
            /*8*/    "Which type of automaton cannot remember the number of symbols it has processed due to limited memory?",
            /*9*/    "Which type of grammar is necessary to handle languages that contain nested structures or balanced symbols?",
            /*10*/   "What type of language includes strings where the number of different symbols is equal, such as 'aabb'?",
            /*11*/   "What machine is capable of recognizing all types of formal languages, including those finite automata and pushdown automata cannot?",
            /*12*/   "What language consists of strings with equal occurrences of different symbols, like 'aabb' or 'ab'?",
            /*13*/   "What concept refers to two strings that cannot be distinguished by the language they belong to?",
            /*14*/   "What test is often used to demonstrate the non-regularity of certain languages, by showing they cannot be recognized by finite automata?",
            /*15*/   "What type of grammar is required to describe languages that involve matching or nested structures, such as balanced parentheses?"
    };

    public static final String[] post_test_lesson_2_answers_hard = {
            /*1*/    "pushdown automaton",
            /*2*/    "palindrome language",
            /*3*/    "myhill-nerode theorem",
            /*4*/    "pumping lemma",
            /*5*/    "non-regular",
            /*6*/    "turing machine",
            /*7*/    "balanced parentheses",
            /*8*/    "finite automaton",
            /*9*/    "context-free grammar",
            /*10*/   "balanced language",
            /*11*/   "turing machine",
            /*12*/   "equal symbols",
            /*13*/   "string indistinguishability",
            /*14*/   "non-regular test",
            /*15*/   "context-free grammar"
    };
}
