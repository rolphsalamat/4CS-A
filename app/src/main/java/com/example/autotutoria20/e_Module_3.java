package com.example.autotutoria20;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class e_Module_3 {
    // Pre-test questions, choices, and answers for Lesson 1
    public static final String[] pre_test_lesson_1_questions = {
            "What does the pumping lemma for regular languages prove?",
            "Which of the following languages is not regular?",
            "What is an example of a non-regular language?"
    };

    public static final String[][] pre_test_lesson_1_choices = {
            {"Every language is regular", "Some languages are not regular", "All context-free languages are regular", "All regular languages are finite"},
            {"{a^n b^n | n ≥ 0}", "a*b*", "a*b+a*", "a+b+"},
            {"{a^n b^n | n ≥ 0}", "a*b*", "a*b*a*", "a+b*"}
    };

    public static final int[] pre_test_lesson_1_answers = {1, 0, 0};

    // Post-test questions, choices, and answers for Lesson 1
    public static final String[] post_test_lesson_1_questions = {
            "What is the purpose of the pumping lemma?",
            "Which language cannot be recognized by a finite automaton?",
            "What demonstrates that a language is not regular?"
    };

    public static final String[][] post_test_lesson_1_choices = {
            {"To prove regularity", "To disprove regularity", "To prove context-freeness", "To disprove context-freeness"},
            {"{a^n b^n | n ≥ 0}", "a*b*", "a*b*a*", "a+b*"},
            {"Finite automaton", "Pumping lemma", "Turing machine", "Context-free grammar"}
    };

    public static final int[] post_test_lesson_1_answers = {1, 0, 1};

    // Pre-test questions, choices, and answers for Lesson 2
    public static final String[] pre_test_lesson_2_questions = {
            "Which of the following is an example of a non-regular language?",
            "What characteristic does a non-regular language exhibit?",
            "Why can't regular expressions describe some languages?"
    };

    public static final String[][] pre_test_lesson_2_choices = {
            {"{a^n b^n | n ≥ 0}", "a*b*", "a*b+a*", "a+b+"},
            {"Can be recognized by a finite automaton", "Cannot be described by a finite number of states", "Can be described by regular expressions", "Has a finite number of states"},
            {"They are too complex", "They involve a nested or recursive structure", "They are finite", "They have too many symbols"}
    };

    public static final int[] pre_test_lesson_2_answers = {0, 1, 1};

    // Post-test questions, choices, and answers for Lesson 2
    public static final String[] post_test_lesson_2_questions = {
            "Which language is an example of a non-regular language?",
            "What makes a language non-regular?",
            "Which structure cannot be expressed by regular expressions?"
    };

    public static final String[][] post_test_lesson_2_choices = {
            {"{a^n b^n | n ≥ 0}", "a*b*", "a*b+a*", "a+b+"},
            {"Requires a finite number of states", "Involves nested or recursive patterns", "Can be described by a finite automaton", "Has no recursive structure"},
            {"Linear patterns", "Nested patterns", "Simple repetition", "Alternating patterns"}
    };

    public static final int[] post_test_lesson_2_answers = {0, 1, 1};

    // Pre-test questions, choices, and answers for Lesson 3
    public static final String[] pre_test_lesson_3_questions = {
            "What is a context-free language?",
            "Which of the following grammars generates a context-free language?",
            "Why are context-free languages important in computer science?"
    };

    public static final String[][] pre_test_lesson_3_choices = {
            {"A language generated by a context-free grammar", "A language recognized by a finite automaton", "A language recognized by a Turing machine", "A language described by regular expressions"},
            {"Regular grammar", "Context-free grammar", "Context-sensitive grammar", "Unrestricted grammar"},
            {"They describe simple string patterns", "They are used to define programming languages", "They are less expressive than regular languages", "They are recognized by finite automata"}
    };

    public static final int[] pre_test_lesson_3_answers = {0, 1, 1};

    // Post-test questions, choices, and answers for Lesson 3
    public static final String[] post_test_lesson_3_questions = {
            "How is a context-free language generated?",
            "Which type of grammar is used to generate context-free languages?",
            "What is a key application of context-free languages in computer science?"
    };

    public static final String[][] post_test_lesson_3_choices = {
            {"Using a context-free grammar", "Using a regular grammar", "Using a context-sensitive grammar", "Using an unrestricted grammar"},
            {"Context-free grammar", "Regular grammar", "Context-sensitive grammar", "Unrestricted grammar"},
            {"Defining programming languages", "Recognizing regular patterns", "Processing simple sequences", "Executing machine code"}
    };

    public static final int[] post_test_lesson_3_answers = {0, 0, 0};

    // Method to get pre-test questions for a specific lesson
    public static e_Question[] getPreTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPreTestLesson1Questions();
            case "M2":
                return getPreTestLesson2Questions();
            case "M3":
                return getPreTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get post-test questions for a specific lesson
    public static e_Question[] getPostTestQuestions(String lesson) {
        switch (lesson) {
            case "M1":
                return getPostTestLesson1Questions();
            case "M2":
                return getPostTestLesson2Questions();
            case "M3":
                return getPostTestLesson3Questions();
            default:
                throw new IllegalArgumentException("Invalid lesson: " + lesson);
        }
    }

    // Method to get pre-test questions for Lesson 1
    public static e_Question[] getPreTestLesson1Questions() {
        return getQuestions(pre_test_lesson_1_questions, pre_test_lesson_1_choices, pre_test_lesson_1_answers);
    }

    // Method to get post-test questions for Lesson 1
    public static e_Question[] getPostTestLesson1Questions() {
        return getQuestions(post_test_lesson_1_questions, post_test_lesson_1_choices, post_test_lesson_1_answers);
    }

    // Method to get pre-test questions for Lesson 2
    public static e_Question[] getPreTestLesson2Questions() {
        return getQuestions(pre_test_lesson_2_questions, pre_test_lesson_2_choices, pre_test_lesson_2_answers);
    }

    // Method to get post-test questions for Lesson 2
    public static e_Question[] getPostTestLesson2Questions() {
        return getQuestions(post_test_lesson_2_questions, post_test_lesson_2_choices, post_test_lesson_2_answers);
    }

    // Method to get pre-test questions for Lesson 3
    public static e_Question[] getPreTestLesson3Questions() {
        return getQuestions(pre_test_lesson_3_questions, pre_test_lesson_3_choices, pre_test_lesson_3_answers);
    }

    // Method to get post-test questions for Lesson 3
    public static e_Question[] getPostTestLesson3Questions() {
        return getQuestions(post_test_lesson_3_questions, post_test_lesson_3_choices, post_test_lesson_3_answers);
    }

    // Method to convert string arrays to e_Question objects
    private static e_Question[] getQuestions(String[] questions, String[][] choices, int[] answers) {
        List<e_Question> questionList = new ArrayList<>();
        for (int i = 0; i < questions.length; i++) {
            questionList.add(new e_Question(questions[i], choices[i], answers[i], e_Question.Difficulty.EASY)); // Adjust difficulty if needed
        }

        // Shuffle the list to randomize the order of the questions
        Collections.shuffle(questionList);

        // Convert the list back to an array
        return questionList.toArray(new e_Question[0]);
    }
}
